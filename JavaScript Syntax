# Commenting in Javascript
- in line comment:
use //
ex) var number = 5; // in-line comment

- multi line comment:
/* this is a multi-line comment */
start and end /* */

# Data Types
- undefined, null, boolean, string, number, symbol, object
- variable (var / let / const)
var can be used through whole program, let is for only the scope, const is a variable that you should never change.
var myName = "Beau"
myName = 8

let ourName = "freeCodeCamp"

const pi = 3.14

# Storing values with the assignment operator
var a;  <- declaring operator
var b = 2;  <- declaring and assigning

a = 7;  <- already declared so this is just assigning.

console.log <- see things in console
console.log(a) <- 7

# Initializing Variables w/ Assignment Operator

# Incrementing Numbers
var a=2;
a++;          <- 3
a--;          <- 1

# Compound Assignment with Augmented Addition
a+=1;
a-=1;
a*=1;
a/=1;

# Declare String variables
var firstName = "Alan";

# Quote
var myStr= "I am a \"double quoted\" string inside \"double quotes\"";
console.log(myStr)
var myStr= 'I am a "double quoted" string inside "double quotes"';
var myStr= `'I am a "double quoted" string inside "double quotes"'`; <- back ticks make single and double both usable.

# Escape Sequences in Strings
\'  single quote
\"  double quote
\\  backslash
\n  newline
\r carriage return
\t tab
\b backspace
\f form feed

var myStr = "FirstLine\n\t\\\SecondLine\nThirdLine"

# Concatenating Strings with Plus Operator
var ourStr = "I come first. " + "I come second.";

# Concatenating Strings with Plus Equals Operator
var ourStr = "I come first. ";
ourStr += "I come second.";

# Constructing Strings with Variables
var ourName = "freeCodeCamp";
var ourStr = "Hello, our name is " + ourName + ", how are you?";

console.log(ourStr)

# Appending Variables to Strings
var anAdjective = "awesome!";
var ourStr = "freeCodeCamp is ";
ourStr += anAdjective;

# Find Length of String
var firstNameLength = 0;
var firstNAme = "Ada";

firstNameLength = firstName.length;

# Bracket Notation
var firstLetterOfFirstName = "";
var firstName = "Ada";
firstLetterOfFirstName = firstName[0];
console.log(firstLetterofFirstName)

# String Immutability
var myStr = "Jello World";
myStr[0] = "H";  <- We can't change individual letter but change the whole string
myStr = "Hello World";

# Bracket notation to find last letter
var firstName = "Ada";
var lastLetterOfFirstName = firstName[firstName.length - 1];
var lastName = "LoveLace"
var lastLetterOfLastName = lastName[lastName.length - 1];

# Word Blanks
function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {
  var result = "";
  result += "The " + myAdjective +" "+ myNoun +" "+ myVerb + " to the store " + myAdverb
  return result;
}
console.log(wordBlanks("dog", "big", "ran", "quickly"));

# Store Multiple Values with Arrays
var ourArray = ["John", 23];
var myArray = ["Quincy", 1];

# Nested Array
var ourArray = [["the Universe", 42], ["everything", 101010]];
var myArray = [["Bulls", 23], ["white sox", 45]];

# Access Array Data with Indexes
var ourArray = [50,60,70];
var ourData = ourArray[0];   <- 50

# Modify Array Data with Indexes
var ourArray = [18, 64, 99];
ourArray[1] = 45;           <- new array [18,45,99]

var myArray = [18, 64, 99];
myArray[0] = 45;
console.log(myArray)

# Access Multi Dimensional Arrays with Indexes
var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];
var myData = myArray[0][0];    <- 1
console.log(myData)

# Manipulate Arrays with push()
var ourArray = ["Stimpson", "J", "cat"];
ourArray.push(["happy", "joy"]) <- new ourArray = ["Stimpson", "J", "cat", ["happy", "joy"]]
push function pushes the array into the ourArray in the end

# Manipulate Arrays with pop()
var ourArray = [1,2,3];
var removedFromOurArray = ourArray.pop() <- removedFromOurArray is 3 / ourArray is [1,2]

var myArray = [["John", 23], ["cat", 2]];
var removedFromMyArray = myArray.pop()
console.log(myArray)  <- ["John", 23]

# Manipulate Arrays with shift()
var ourArray = ["Stimpson", "J", ["cat"]];
var removedFromOurArray = ourArray.shift() <- removedFromOurArray is "Stimpson" / ourArray is ["J", ["cat"]]
shift removes the first array

# Manipulate Arrays with unshift()
var ourArray = ["Stimpson", "J", "cat"];
ourArray.shift();  <- ourArray equals ["J", "cat"]
ourArray.unshift("Happy"); <- ourArray now equals ["Happy", "J", "cat"]
unshift adds element to the beginning of array.

var myArray = [["John", 23], ["dog", 3]];
myArray.shift();
myArray.unshift(["Paul", 35]);  <- myArray now equals [["Paul", 35], ["dog", 3]]

# Shopping List (Nested Array)
var myList = [["cereal", 3], ["milk", 2], ["banana", 3], ["juice", 2], ["eggs", 5]]

# Write Reusable Code with Functions
function ourReusableFunction() {
  console.log("Heyya, World");        <- code between {} will be the main.
}

ourResuableFunction();   <- Heyya, World will come out.

function resuableFunction() {
  console.log("Hi World");
}

resuableFunction();    <- Hi World will come up.
